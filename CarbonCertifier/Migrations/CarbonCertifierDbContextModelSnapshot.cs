// <auto-generated />
using CarbonCertifier.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarbonCertifier.Migrations
{
    [DbContext(typeof(CarbonCertifierDbContext))]
    partial class CarbonCertifierDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarbonCertifier.Entities.CarbonProject.CarbonProjectEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProjectCode")
                        .IsUnique();

                    b.ToTable("CarbonProjects");
                });

            modelBuilder.Entity("CarbonCertifier.Entities.CreditCarbon.CarbonCreditEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CarbonProjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreatedAt")
                        .HasColumnType("bigint");

                    b.Property<string>("CreditCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerDocument")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<double>("TonCO2Quantity")
                        .HasColumnType("double precision");

                    b.Property<long>("UpdatedAt")
                        .HasColumnType("bigint");

                    b.Property<int>("VintageYear")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CarbonProjectId");

                    b.HasIndex("CreditCode")
                        .IsUnique();

                    b.ToTable("CarbonCredits");
                });

            modelBuilder.Entity("CarbonCertifier.Entities.CreditCarbon.CarbonCreditEntity", b =>
                {
                    b.HasOne("CarbonCertifier.Entities.CarbonProject.CarbonProjectEntity", "CarbonProject")
                        .WithMany("CarbonCredits")
                        .HasForeignKey("CarbonProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarbonProject");
                });

            modelBuilder.Entity("CarbonCertifier.Entities.CarbonProject.CarbonProjectEntity", b =>
                {
                    b.Navigation("CarbonCredits");
                });
#pragma warning restore 612, 618
        }
    }
}
